#вкладка "Оценка инвестиций"

import streamlit as st  #Streamlit — это фреймворк для языка программирования Python
import pandas as pd
import matplotlib.pyplot as plt  #для графика

def investment():  #tabs - это вкладки; number - номер данной вкладки, который передаётся из Main

    st.title("Оценка инвестиций")

    st.info("Задача представляет собой оценку целесообразности инвестиционного проекта с помощью расчёта некоторых экономических показателей") #голубое поле с текстом

    #числовое поле ввода для количества видов товаров
    n = st.number_input("Продолжительность инвестирования (во временных периодах):",
                                min_value = 1,
                                value = 1,
                                step = 1)

    #числовое поле ввода для изначальных вложений
    K = st.number_input("Размер изначальных вложений (в рублях):",
                                min_value = 0.01,
                                value = 0.01,
                                step = 0.01)

    #числовое поле ввода для ставки приведения за временной период
    r = st.number_input("Ставка приведения за временной период (в процентах):",
                                min_value = 0.01,
                                value = 0.01,
                                step = 0.01)

    #выбор: доходы за каждый период времени одинаковы или нет
    options = ["Да", "Нет"]
    ok = st.radio("Доходы за каждый период времени одинаковы?", options)

    #если пользователь ответил "Да" на вопрос про одинаковость доходов за каждый период
    if ok == "Да":

        #числовое поле ввода для единственного значения доходности
        income = st.number_input("Ожидаемая доходность за один период:",
                                    value = 0.00,
                                    step = 0.01)

        r = r / 100 #преобразование ставки приведения
        PI = income*((1+r)**n-1)/(K * r * (1+r)**n) #подсчёт значения PI по соответствующей формуле
        NPV = - K + income * ((1+r)**n-1)/(r * (1+r)**n) #подсчёт значения NPV по соответствующей формуле

        #далее код для нахождения периода инвестирования, в котором впервые проект окупился
        summa = 0
        n_0 = 0
        for i in range(n):
            summa += income/((1+r)**(i+1))
            if (-K + summa) > 0:
                n_0 = i + 1
                break

        #дальнейший код для создания графика (начинаем с -K в плане доходности и как выбираемся из отрицательных значений)
        a_mas = [-K]
        summa = 0
        for i in range(n):
            summa += income /((1+r)**(i+1))
            a_mas.append(-K + summa)
        #a_mas.append(a_mas[n_0])
        #a_mas.append(a_mas[n_0])
        b_mas = [i for i in range(n+1)]
        #b_mas.append(n_0)
        #b_mas.append(n_0)
        c_mas = [None for i in range(n+1)]
        c_mas.append(max(a_mas))
        c_mas.append(min(a_mas))
        a = pd.DataFrame({
            "период": b_mas,
            "сумма доходностей": a_mas,
            #"срок окупаемости": c_mas,
            #"нулевой уровень": [0 for i in range (n+3)]
            })

    #если пользователь ответил "Нет" на вопрос про одинаковость доходов за каждый период
    else:

        #создание таблицы для возможности ввода пользователем ожидаемых доходностей в заданные временные периоды
        income = pd.DataFrame(
        {
            "Временной период": [i+1 for i in range (n)],
            "income": [0.0 for i in range (n)],
        } )
        income = st.data_editor(
            income, #вставка колонок из датафрейма income 
            #конфигурация колонок
            column_config = {  
                "income": st.column_config.NumberColumn(   #колонка таблицы "ожидаемая доходдность", которую пользователь заполняет значениями
                    "Ожидаемая доходность",
                    step = 0.01,
                    format = "%.2f руб.",
                    required = True
                ),  
                "Временной период": st.column_config.NumberColumn(  #колонка таблицы "временной период", которая нужна для удобства индексации и которую пользователь не может менять
                    disabled = True
                )
            },
            hide_index = True
        )

        r = r / 100 #преобразование ставки приведения
        #далее код для нахождения периода инвестирования, в котором впервые инвестирование окупилось, и сбор суммы 
        summa = 0
        n_0 = 0
        income_mas = income["income"].tolist()
        for i in range(n):
            summa += income_mas[i]/((1+r)**(i+1))
            if (-K + summa) > 0 and n_0 == 0:  #проверка на n_0 == 0 нужна для того, чтобы повторно не зайти в этот блок и не прибавить лишний временной период, а break не используется для сбора суммы
                n_0 = i + 1

        PI = 1/K * summa  #подсчёт значения PI по соответствующей формуле
        NPV = - K + summa  #подсчёт значения NPV по соответствующей формуле

        #дальнейший код для создания графика (начинаем с -K в плане доходности и как выбираемся из отрицательных значений)
        a_mas = [-K]
        summa = 0
        for i in range (n):
            summa += income_mas[i]/((1+r)**(i+1))
            a_mas.append(-K+summa)
        #a_mas.append(a_mas[n_0])
        #a_mas.append(a_mas[n_0])
        b_mas = [i for i in range(n+1)]
        #b_mas.append(n_0)
        #b_mas.append(n_0)
        c_mas = [None for i in range(n+1)]
        c_mas.append(max(a_mas))
        c_mas.append(min(a_mas))
        a = pd.DataFrame({
            "период": b_mas,
            "сумма доходностей": a_mas,
            #"срок окупаемости": c_mas,
            #"нулевой уровень": [0 for i in range (n+3)]
            })

    #далее вывод результата
    if PI > 1 and NPV > 0:  #при таких показателях инвестирование целесообразно
        st.success("Инвестирование целесообразно!")  #зелёное поле с текстом
    else:
        st.error("Инвестирование нецелесообразно!")  #красное поле с текстом

    st.write(f"Чистая приведённая стоимость: {round(NPV, 3)} руб.")
    st.write(f"Индекс доходности: {round(PI, 3)}")

    if n_0 != 0:
        st.write(f"Инвестиционный проект впервые окупится во временной период: {n_0}")
    else:
        st.write("Инвестиционный проект не окупится ни разу за введённый инвестиционный период.")

    #вывод графика
    #ax = st.line_chart(a, x = "период", y = ["сумма доходностей", "срок окупаемости", "нулевой уровень"])  #line_chart - линейная диаграмма (тип диаграммы, который отображает информацию в виде серии точек данных, называемых «маркерами», соединённых прямыми отрезками лини
    fig, ax1 = plt.subplots()
    ax1.plot(a["период"], a["сумма доходностей"], '-o')
    ax1.xaxis.set_major_locator(plt.MultipleLocator(1))
    #ax1.vlines(n_0, -K, K, linestyles='dashed', colors='red')
    if n_0!=0:
        ax1.axvline(n_0, color='red', linestyle='dashed')
    ax1.axhline(0, color='black')
    if n_0 == 0:
        ax1.legend(['Сумма доходностей'])
    else:
        ax1.legend(['Сумма доходностей', 'Срок окупаемости'])
    ax1.grid()
    ax1.set_xlabel('Периоды')
    ax1.set_ylabel('Рубли')
    st.pyplot(fig)

    #st.write(a.loc[a["период"]==n_0, "доходность"])
    '''if n_0!=0:
        line_0=pd.DataFrame({
            "line": [a["доходность"].min(), a["доходность"].max(), a.iloc[n_0]["доходность"] ],
            "период" : [n_0, n_0, n_0],
            "доходность": [None, None, None]
            })
        ax.add_rows(line_0)'''
